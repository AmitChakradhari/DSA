let cashes: [ Int] = [10, 20 , 30 , 21, 5, 9]



func rob(_ nums: [Int]) -> Int {
    var values: [Int] = Array(repeating: 0, count: nums.count)
    return maxValue(houses: nums, index: 0, values: &values)
}

func maxValue(houses: [Int], index: Int, values: inout [Int]) -> Int {
    if index >= houses.count {
        return 0
    }
    if values[index] != 0 {
        return values[index]
    }
    let included = houses[index] + maxValue(houses: houses, index: index + 2, values: &values)
    let notIncluded = maxValue(houses: houses, index: index + 1, values: &values)
    if included > notIncluded {
        values[index] = included
    } else {
        values[index] = notIncluded
    }
    return values[index]
}



print(rob(cashes))










func coinChange(_ coins: [Int], _ amount: Int) -> Int {
    var coinRow: [Int] = [0]
    coinRow.append(contentsOf: coins)
    print("coins \(coinRow)")
    var amountColumn: [Int] = []
    for i in 0 ... amount {
        amountColumn.append(i)
    }
    print("colum \(amountColumn)")
    var matrix: [[Int]] = Array(repeating: Array(repeating: 0, count: amountColumn.count),
                                count: coinRow.count)
    for j in 0..<amountColumn.count {
        matrix[0][j] = -1
    }
    print("19 matrix: \(matrix)")
    for i in  1..<coinRow.count {
        for j in 1..<amountColumn.count {
            print("\n 25 ij \(i)\(j)")
            if amountColumn[j] >= coinRow[i] {
                print(" \(amountColumn[j]) >= \(coinRow[i])")
                if (matrix[i][j - coinRow[i]] == 0) && (i != 0) && (j - coinRow[i]) != 0 {
                    matrix[i][j] = 0
                    continue
                }
                let newCoins = 1 + matrix[i][j - coinRow[i]]
                if matrix[i-1][j] == 0 {
                    matrix[i][j] = newCoins
                } else if newCoins < matrix[i-1][j] {
                    matrix[i][j] = newCoins
                } else {
                    matrix[i][j] = matrix[i-1][j]
                }
            } else {
                // smaller, set above row result
                matrix[i][j] = matrix[i-1][j]
            }
            print("\n 35 ij \(i)\(j) mat: \(matrix)")
        }
    }
    return matrix[coinRow.count - 1][amountColumn.count - 1]
    }

print(coinChange([2], 1))
