// kMP
func strStr(_ haystack: String, _ needle: String) -> Int {
    if haystack.count < needle.count { return -1 }
    var lps: [Int] = Array(repeating: 0, count: needle.count)
    var count = 0
    let needleArray = Array(needle)
    let haystackArray = Array(haystack)
    if needle.count > 1 {
        var i = 1
        while i < needleArray.count {
            if needleArray[i] == needleArray[count] {
                count += 1
                lps[i] = count
                i += 1
            } else {
                if count == 0 {
                    lps[i] = 0
                    i += 1
                } else {
                    count = lps[count - 1]
                }
            }
        }
        print("lps: \(lps)")
    }
    var j = 0
    var i = 0
    while i < haystackArray.count, j < needleArray.count {
        print("ij \(i) \(j)")
        if haystackArray[i] == needleArray[j] {
            print("matching \(needleArray[j])")
            j += 1
            i += 1
        } else {
            if j > 0 {
                j = lps[j-1]
                print("update j \(j)")
            } else if j == 0 {
                i += 1
                print("update i \(i)")
            }
        }
    }
    if j == needleArray.count {
        // match
        print("ended")
        return i - needleArray.count
    }
    return -1
}

print(strStr("adcadcaddcadde", "adcadde"))
